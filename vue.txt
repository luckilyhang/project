cli3.0版本创建项目
vue create project//(项目名称)
yarn add vuex //引入插件
yarn serve //启动打开项目

git命令学习网址 https://www.jianshu.com/p/53a00fafbe99

创建vuex
1.npm install vuex --save
2.创建store.js
store.js内写
import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex);
export const store= new Vuex.Store({
    state:{
        goodsList:{number:0}
    }
})
export default store

3.main.js引入store.js 
4.组件中this.$stote.state.goodList调用

改变state中的值
1.创建
mutations:{
	add:state=>{
	state.goodSlist.name++
	}
	}
2.在组件中调用this.$store.commit('add');
不能直接console.log(this.$store.commit('add'));注意
this.$store.commit("increment")是执行过程，this.$store.state.count是执行结果，在前者执行之后才能执行后者
3. ...mapState([])数组形式 主要是用作组件中获取state中的值，如果不用这种形式，就需要重复return 
组件中属性计算：
mapState主要是为了解决this.$store.state
computed:{
        ...mapState([
         'count',//this.store.state.count
         'limit'
        ]),
	
}
组件中引入 import {mapState,mapMutations} from "vuex";
...mapMutations用法
1.先引入import {mapState,mapMutations} from "vuex";
2.在methods里边定义 
methods:{
            ...mapMutations([
                'increment' //vuex里边定义的函数名
            ])

        }
mapState,mapGetters定义在computed计算属性里边,action和mutation定义在methods里边
假如要++ 直接在@click='increment'
页面中改变state中的值时，无论是mapMutations还是action。都需要出发函数，函数名是vuex中定义的名字
mapMutations主要是为了解决this.$store.commit('increment')的

Gettre用法
getter相当于vue的计算属性
store.js里边
getters:{
    done:state=>{
        return state.goodList.filter(todo=>todo.name)
    }  
组件里边引入 import {mapState,mapMutations，mapGetters} from "vuex";
computed:{
         ...mapGetters(['done'])
}

action用法
异步操作，在action中定义
export const modifyAName=({commit}, name)=>{ // commit 提交；name即为点击后传递过来的参数
        commit ('modify', name)
}   
modify是Mutation里边定义的方法，name是参数


4.路由懒加载 为了解决首页加载速度慢，白屏问题。
写法：在router.js 里边写
path:''
name:''
component:resolve=>require(['@component/Home'],resolve),
requre提供的方法里边第一个参数为数组，第二个是回调函数 数组里边是引用的组件，如果这里边已经写了路径就不用import引入组件了
注意：运用了路由懒加载打包项目后运行html会报错，找到build下面的webpack.prod.conf.js  output里边添加   publicPath："./",，
5.promise为了解决回调问题，比如说一个ajax需要获取上一个ajax的返回值，如果请求过多就会一直回调。

二.vue中slot用法
1.一般多用于父子组件之间传值
在子组件中书写<slot><slot>,如果父组件引入了这一子组件。<child><span>占位</span></child>，如果父组件引入的组件中华书写了这一标签。那么子组件中slot标签中的内容将会被覆盖。但是具名槽口不会被覆盖
当父组件书写标签时，并且子组件没有具名槽口时，子组件中的内容将会被覆盖。
2.子组件写了具名槽口，如果父组件在引用了具名槽口时，子组件内容被覆盖
3.作用于插槽
使用时候子组件标签<Child>中要有<template scope=”scopeName”>标签，再通过scopeName.childProp就可以调用子组件模板中的childProp绑定的数据，所以作用域插槽是一种子传父传参的方式，解决了普通slot在parent中无法访问child数据的去问题；
三.vue组件之间的传值
父传子组件之间传值用props
1.子组件定义一个mesage props:['message']
2.父组件<child message="哈哈哈"></child>就把父组件中的哈哈哈传给子组件使用
props传递信息是，可以是数组形式props:[]，当使用数组封装props的时候只是简单将父组件的参数传递给子组件使用，此处的参数可以是对象，字符串，number类型的数据 也可以是对象方式props:{}可以更加高级的校验参数，比如参数类型，默认值，参数大小等一系列校验。当不符合时候，可以看到Vue再控制台给出错误警告
3.如果父组件向子组件传递一个数组时,要用<child :message=arr></child>,子组件用props:{message:{type:Array}}
子组件向父组件传递信息自定义事件$emit
1.在子组件中定义一个点击事件，@click="add"
2.在子组件 this.$emit中传入两个参数，第一个是自定义的事件名称，这个自定义事件以后要写在父组件
<child @info='cc'></child>,第二个参数是要传递的信息
methods:{
	add(){
	this.$emit('info',data)
	}
}
3.父组件接收子组件信息，首先定义<child @info='cc'></child> info是子组件定义的事件名称
然后在父组件
methods:{
	cc(data){
		console.log(data) //这里的data就是传递的信息
	}
}
非父子组件之间的传值 在不用vuex情况下用eventbus中间处理器  需要定义个公共的公共实例文件bus.js，作为中间仓库来传值
1.先建立bus.js 
bus.js里边书写
import Vue from 'vue'
export default new Vue()
2.建立a.vue
Bus.$emit("val", this.arr);//发送信息到中央处理器，第一个参数是参数名称，第二个是传递的参数
3.建立b.vue
 Bus.$on("val",(data)=>{//从bus.js取数据
                //  var vm = this;
                this.arrData = data;
                console.log(this.arrData);
            });
	
vue自定义指令
directives:{//跟methods同级
　　　　change:{
　　　　　　bind:function(){},
　　　　　　update:function(){},
　　　　　　unbind:function(){}
　　　　}
　　}
chane写在标签内是v-change
bind 指令在绑定到元素要执行的操作
update 如果在调用指令时候，传了参数，当参数变化时候，就会执行update所指定的方法
unbind 解绑要执行的操作
change里边的函数有两个参数:
一个是el，对应的是调用指令的元素
一个bindings，是一个对象：name/rawName/value/oldValue...


vue封装全局函数
1.新建common.js文件
js文件里边写
exports.install =(Vue)=> {
    Vue.prototype.changnum =(n)=>{
      let num= n.toFixed(2);
      console.log(num)
      return num
    };
};
2.main.js引入common.js
import common from './common.js'
Vue.use(common);
3.直接在组件中 
this.changnum()调用
